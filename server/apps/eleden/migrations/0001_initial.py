# Generated by Django 3.2.12 on 2022-02-16 07:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import apps.eleden.models.article
import devind_helpers.resolve_model


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('devind_core', '0001_initial'),
        ('messenger', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArticleIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название рецензирования', max_length=256)),
                ('coefficient', models.FloatField(default=1.0, help_text='Коэффициент учета')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
            ],
            options={
                'ordering': ('coefficient',),
            },
        ),
        migrations.CreateModel(
            name='BlockKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=128)),
                ('order', models.PositiveIntegerField(default=0, help_text='Позиция для сортировки')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=256)),
                ('address', models.CharField(help_text='Адрес', max_length=512)),
                ('area', models.FloatField(help_text='Площадь')),
                ('year', models.PositiveSmallIntegerField(help_text='Год постройки')),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=128)),
                ('area', models.FloatField(help_text='Площадь', null=True)),
                ('disabled', models.BooleanField(default=False, help_text='Аудитория приспособлена для лиц с ограниченными возможностями здоровья')),
                ('building', models.ForeignKey(help_text='Здание, в котором располагается аудитория', null=True, on_delete=django.db.models.deletion.CASCADE, to='eleden.building')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('chat', models.ForeignKey(default=None, help_text='Чат курса', null=True, on_delete=django.db.models.deletion.SET_NULL, to='messenger.chat')),
            ],
            options={
                'ordering': ('-created_at', 'id'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='CoursePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(help_text='Курс', on_delete=django.db.models.deletion.CASCADE, to='eleden.course')),
            ],
        ),
        migrations.CreateModel(
            name='Direction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Название')),
                ('code', models.CharField(help_text='Код специальности', max_length=20, unique=True)),
                ('secret', models.BooleanField(default=False, help_text='Секретное направление подготовки')),
                ('delete', models.BooleanField(default=False, help_text='Теперь не проводиться обучения по данному направлению')),
            ],
            options={
                'ordering': ('code', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Код', max_length=128)),
                ('name', models.CharField(help_text='Название', max_length=1024)),
                ('units', models.PositiveIntegerField(default=0, help_text='Фактических единиц зачета')),
                ('hours', models.PositiveIntegerField(default=0, help_text='Часов по плану')),
                ('annotation', models.FileField(default=None, help_text='Аннотация к рабочей программе дисциплины/практики/ГИА', max_length=1024, null=True, upload_to='storage/disciplines/annotations/')),
                ('annotation_sign', models.FileField(default=None, help_text='Электронная подпись аннотации к рабочей программе дисциплины/практики/ГИА', max_length=1024, null=True, upload_to='storage/disciplines/annotations/')),
                ('work_program', models.FileField(default=None, help_text='Рабочая программа дисциплины', max_length=1024, null=True, upload_to='storage/disciplines/work_programs/')),
                ('work_program_sign', models.FileField(default=None, help_text='Электронная подпись рабочей программы дисциплины', max_length=1024, null=True, upload_to='storage/disciplines/work_programs/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
            ],
            options={
                'ordering': ('code', 'id'),
                'permissions': [('view_discipline_additional_fields', 'Can view discipline additional fields'), ('change_discipline_additional_fields', 'Can change discipline additional fields')],
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='DisciplineKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('order', models.PositiveIntegerField(default=0, help_text='Позиция для сортировки')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='DisciplineView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('order', models.PositiveIntegerField(default=0, help_text='Позиция для сортировки')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='EduForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Название')),
                ('short_name', models.CharField(help_text='Короткое название', max_length=255)),
                ('parent', models.ForeignKey(default=None, help_text='Родительская форма обучения', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eleden.eduform')),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='EduProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Профиль подготовки', max_length=1024)),
                ('adaptive', models.BooleanField(default=False, help_text='Признак адапативности программ')),
                ('admission', models.PositiveIntegerField(help_text='Год поступления')),
                ('expedited', models.BooleanField(help_text='Ускоренная программа')),
                ('description', models.FileField(default=None, help_text='Описание', max_length=1024, null=True, upload_to='storage/edu_programs/description/')),
                ('description_sign', models.FileField(default=None, help_text='Электронная подпись описания', max_length=1024, null=True, upload_to='storage/edu_programs/description/')),
                ('syllabus', models.FileField(default=None, help_text='Учебный план', max_length=1024, null=True, upload_to='storage/edu_programs/syllabus/')),
                ('syllabus_sign', models.FileField(default=None, help_text='Электронная подпись учебного плана', max_length=1024, null=True, upload_to='storage/edu_programs/syllabus/')),
                ('calendar', models.FileField(default=None, help_text='Календарный учебный график', max_length=1024, null=True, upload_to='storage/edu_programs/calendar/')),
                ('calendar_sign', models.FileField(default=None, help_text='Электронная подпись календарного учебного графика', max_length=1024, null=True, upload_to='storage/edu_programs/calendar/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('direction', models.ForeignKey(help_text='Направление подготовки', on_delete=django.db.models.deletion.CASCADE, to='eleden.direction')),
                ('edu_form', models.ForeignKey(help_text='Форма обучения', on_delete=django.db.models.deletion.CASCADE, to='eleden.eduform')),
            ],
            options={
                'ordering': ('-admission', 'id'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='EduService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Название')),
            ],
        ),
        migrations.CreateModel(
            name='FileKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Наименование цели загрузки файла', max_length=255)),
                ('accept', models.CharField(help_text='Допустимый формат загрузки файлов', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
            ],
            options={
                'ordering': ('created_at', 'id'),
            },
        ),
        migrations.CreateModel(
            name='HoursKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='JobPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.FloatField(default=1.0, help_text='Занимаемая ставка')),
                ('kind', models.CharField(choices=[('MJ', 'Основное место работы'), ('IP', 'Внутренний совместитель'), ('EP', 'Внешний совместитель'), ('CC', 'Договор гражданско правового характера')], default='MJ', help_text='Тип работы', max_length=2)),
                ('job', models.ForeignKey(help_text='Место работы пользователя', on_delete=django.db.models.deletion.CASCADE, related_name='job_post_set', to='eleden.job')),
            ],
        ),
        migrations.CreateModel(
            name='JobPostStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=256)),
                ('active', models.BooleanField(default=False, help_text='Является ли статус активным')),
                ('template_docx', models.FileField(default=None, help_text='Шаблон docx для формрования приказа по присвоению статуса', null=True, upload_to='storage/job_status/templates/docx')),
                ('template_xml', models.FileField(default=None, help_text='Шаблон xml для формирования приказа по присвоению статуса', null=True, upload_to='storage/job_status/templates/xml')),
                ('order', models.PositiveIntegerField(help_text='Позиция для сортировки')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='PortfolioFile',
            fields=[
                ('describe', models.TextField(help_text='Описание файла в портфолио')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('file', models.OneToOneField(help_text='Привязанный к портфолио файл', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='devind_core.file')),
                ('discipline', models.ForeignKey(help_text='Дисциплина', null=True, on_delete=django.db.models.deletion.SET_NULL, to='eleden.discipline')),
                ('kind', models.ForeignKey(help_text='Тип файла из портфолио', null=True, on_delete=django.db.models.deletion.SET_NULL, to='eleden.filekind')),
                ('user', models.ForeignKey(help_text='Пользователь, который подтверждает правильность файла, занесенного в портфолио', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-updated_at', 'file'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('short_name', models.CharField(help_text='Короткое название', max_length=10)),
                ('kind', models.PositiveIntegerField(choices=[(0, 'attendance'), (1, 'mark')], default=0, help_text='Тип записи')),
                ('order', models.PositiveIntegerField(help_text='Позиция для сортировки')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='WorkForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('order', models.PositiveIntegerField(default=0, help_text='Позиция для сортировки')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='WorkKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('short_name', models.CharField(help_text='Короткое название', max_length=32)),
                ('is_hidden', models.BooleanField(default=False, help_text='Скрыт ли вид работы')),
                ('is_final', models.BooleanField(default=False, help_text='Выставляется ли итоговая оценка за данный вид работы')),
                ('order', models.PositiveIntegerField(help_text='Позиция для сортировки')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('work_form', models.ForeignKey(help_text='Форма работы', null=True, on_delete=django.db.models.deletion.CASCADE, to='eleden.workform')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('short_name', models.CharField(help_text='Сокращенное название', max_length=50, unique=True)),
                ('admission', models.PositiveIntegerField(help_text='Год образования/поступления')),
                ('delete', models.BooleanField(default=False, help_text='Удалена ли группа (закончено обучение)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('edu_program', models.ForeignKey(help_text='Реализуемая образовательная программа', null=True, on_delete=django.db.models.deletion.SET_NULL, to='eleden.eduprogram')),
                ('group', models.ForeignKey(help_text='Группа прав', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.group')),
                ('parent', models.ForeignKey(help_text='Родительская группа (Администрация -> Кафедра -> Студенты)', null=True, on_delete=django.db.models.deletion.CASCADE, to='eleden.team')),
                ('responsible_users', models.ManyToManyField(help_text='Пользователи, ответственные за группу', related_name='responsible_teams', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(help_text='Участники', related_name='teams', through='eleden.Job', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-updated_at', 'id'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=512)),
                ('order', models.PositiveIntegerField(help_text='Позиция для сортировки')),
                ('statuses', models.ManyToManyField(help_text='Возможные статусы', to='eleden.JobPostStatus')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=255)),
                ('short_name', models.CharField(help_text='Короткое название', max_length=10)),
                ('is_final', models.BooleanField(default=False, help_text='Выставляется ли итоговая оценка за этот период')),
                ('template_doc', models.FileField(default=None, help_text='Шаблон doc', null=True, upload_to='storage/statements/doc/')),
                ('template_xml', models.FileField(default=None, help_text='Шаблон xml', null=True, upload_to='storage/statements/xml/')),
                ('order', models.IntegerField(help_text='Позиция для сортировки')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('registrations', models.ManyToManyField(help_text='Возможные учеты студентов на занятиях', to='eleden.Registration')),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='MethodologicalSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Подпись файла', max_length=1024)),
                ('src', models.FileField(default=None, help_text='Файл', max_length=1024, null=True, upload_to='storage/edu_programs/methodological_supports/')),
                ('src_sign', models.FileField(default=None, help_text='Электронная подпись файла', max_length=1024, null=True, upload_to='storage/edu_programs/methodological_supports/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('discipline', models.ForeignKey(help_text='Дисциплина', on_delete=django.db.models.deletion.CASCADE, to='eleden.discipline')),
            ],
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='JobPostStatusHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decree_docx', models.FileField(default=None, help_text='Приказ по присвоению статуса в формате docx', max_length=256, null=True, upload_to='storage/job_status/decrees/docx')),
                ('decree_pdf', models.FileField(default=None, help_text='Приказ по присвоению статуса в формате pdf', max_length=256, null=True, upload_to='storage/job_status/decrees/pdf')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата получения статуса')),
                ('end_at', models.DateTimeField(default=None, help_text='Дата потери статуса', null=True)),
                ('job_post', models.ForeignKey(help_text='Должность пользователя на месте работы', on_delete=django.db.models.deletion.CASCADE, related_name='status_history_set', to='eleden.jobpost')),
                ('status', models.ForeignKey(help_text='Статус места работы пользователя', on_delete=django.db.models.deletion.CASCADE, related_name='status_history_set', to='eleden.jobpoststatus')),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.AddField(
            model_name='jobpost',
            name='post',
            field=models.ForeignKey(help_text='Занимаемая дожность', on_delete=django.db.models.deletion.CASCADE, related_name='job_post_set', to='eleden.post'),
        ),
        migrations.AddField(
            model_name='job',
            name='team',
            field=models.ForeignKey(help_text='Группа', on_delete=django.db.models.deletion.CASCADE, to='eleden.team'),
        ),
        migrations.AddField(
            model_name='job',
            name='user',
            field=models.ForeignKey(help_text='Пользователь', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Handout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Описание раздаточного материала')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('course', models.ForeignKey(help_text='Курс', on_delete=django.db.models.deletion.CASCADE, to='eleden.course')),
                ('file', models.ForeignKey(help_text='Файл пользователя', on_delete=django.db.models.deletion.CASCADE, to='devind_core.file')),
                ('period', models.ForeignKey(default=None, help_text='Период обучения', null=True, on_delete=django.db.models.deletion.SET_NULL, to='eleden.period')),
                ('user', models.ForeignKey(default=None, help_text='Пользователь, который загрузил файл', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='EduHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_number', models.PositiveSmallIntegerField(default=1, help_text='Курс')),
                ('semester_number', models.PositiveSmallIntegerField(default=1, help_text='Семестр')),
                ('value', models.FloatField(default=0.0, help_text='Значение')),
                ('discipline', models.ForeignKey(help_text='Дисциплина', on_delete=django.db.models.deletion.CASCADE, to='eleden.discipline')),
                ('hours_kind', models.ForeignKey(help_text='Тип часов', on_delete=django.db.models.deletion.CASCADE, to='eleden.hourskind')),
                ('work_kind', models.ForeignKey(help_text='Вид работы', on_delete=django.db.models.deletion.CASCADE, to='eleden.workkind')),
            ],
        ),
        migrations.CreateModel(
            name='EduCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=512)),
                ('code', models.CharField(help_text='Код', max_length=128)),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядок сортировки')),
                ('block_kind', models.ForeignKey(help_text='Тип блока', on_delete=django.db.models.deletion.CASCADE, to='eleden.blockkind')),
                ('discipline_kind', models.ForeignKey(help_text='Тип образовательной программы', on_delete=django.db.models.deletion.CASCADE, to='eleden.disciplinekind')),
                ('parent', models.ForeignKey(help_text='Родительский цикл', null=True, on_delete=django.db.models.deletion.CASCADE, to='eleden.educycle')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='EduClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_day', models.PositiveSmallIntegerField(help_text='День недели')),
                ('class_number', models.PositiveSmallIntegerField(help_text='Номер занятия')),
                ('is_distance_learning', models.BooleanField(default=False, help_text='Дистанционное обучение или нет')),
                ('classrooms', models.ManyToManyField(help_text='Аудитории', to='eleden.Classroom')),
                ('course_period', models.ForeignKey(help_text='Период курса', on_delete=django.db.models.deletion.CASCADE, to='eleden.courseperiod')),
                ('discipline', models.ForeignKey(help_text='Дисциплина', on_delete=django.db.models.deletion.CASCADE, to='eleden.discipline')),
                ('teachers', models.ManyToManyField(help_text='Преподаватели', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='discipline',
            name='edu_program',
            field=models.ForeignKey(help_text='Образовательная программа', on_delete=django.db.models.deletion.CASCADE, to='eleden.eduprogram'),
        ),
        migrations.AddField(
            model_name='discipline',
            name='kind',
            field=models.ForeignKey(help_text='Тип', on_delete=django.db.models.deletion.CASCADE, to='eleden.disciplinekind'),
        ),
        migrations.AddField(
            model_name='discipline',
            name='parent',
            field=models.ForeignKey(help_text='Родительская дисциплина', null=True, on_delete=django.db.models.deletion.CASCADE, to='eleden.discipline'),
        ),
        migrations.AddField(
            model_name='discipline',
            name='team',
            field=models.ForeignKey(help_text='Ответственная кафедра', null=True, on_delete=django.db.models.deletion.SET_NULL, to='eleden.team'),
        ),
        migrations.AddField(
            model_name='discipline',
            name='users',
            field=models.ManyToManyField(help_text='Авторы', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='discipline',
            name='view',
            field=models.ForeignKey(help_text='Форма представления', on_delete=django.db.models.deletion.CASCADE, to='eleden.disciplineview'),
        ),
        migrations.AddField(
            model_name='direction',
            name='edu_service',
            field=models.ForeignKey(help_text='Образовательная услуга', on_delete=django.db.models.deletion.CASCADE, to='eleden.eduservice'),
        ),
        migrations.AddField(
            model_name='direction',
            name='parent',
            field=models.ForeignKey(default=None, help_text='Родительское направление', null=True, on_delete=django.db.models.deletion.CASCADE, to='eleden.direction'),
        ),
        migrations.AddField(
            model_name='courseperiod',
            name='period',
            field=models.ForeignKey(help_text='Период', on_delete=django.db.models.deletion.CASCADE, to='eleden.period'),
        ),
        migrations.AddField(
            model_name='course',
            name='edu_hours',
            field=models.ForeignKey(help_text='Часы по плану', on_delete=django.db.models.deletion.CASCADE, to='eleden.eduhours'),
        ),
        migrations.AddField(
            model_name='course',
            name='periods',
            field=models.ManyToManyField(help_text='Периоды обучения', through='eleden.CoursePeriod', to='eleden.Period'),
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(help_text='Преподаватели курса', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='team',
            field=models.ForeignKey(help_text='Группа пользователей, которая обучается', on_delete=django.db.models.deletion.CASCADE, to='eleden.team'),
        ),
        migrations.CreateModel(
            name='Competence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название', max_length=1024)),
                ('code', models.CharField(help_text='Код', max_length=10)),
                ('category', models.CharField(help_text='Категория', max_length=512)),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядок сортировки')),
                ('disciplines', models.ManyToManyField(help_text='Дисциплины', to='eleden.Discipline')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Attestation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('confirmed_by', models.ForeignKey(help_text='Пользователь, который подтвердил аттестацию', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attestation_confirmed_by_set', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(help_text='Курс', on_delete=django.db.models.deletion.CASCADE, to='eleden.course')),
                ('period', models.ForeignKey(help_text='Период', on_delete=django.db.models.deletion.CASCADE, to='eleden.period')),
                ('registration', models.ForeignKey(help_text='Учет студента', on_delete=django.db.models.deletion.CASCADE, to='eleden.registration')),
                ('set_by', models.ForeignKey(help_text='Пользователь, который выставил аттестацию', on_delete=django.db.models.deletion.DO_NOTHING, related_name='attestation_set_by_set', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='Учащийся', on_delete=django.db.models.deletion.CASCADE, related_name='annotation_user_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at', 'id'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src', models.FileField(help_text='Путь к файлу', upload_to=apps.eleden.models.article.articles_path)),
                ('name', models.TextField(help_text='Выходные параметры статьи')),
                ('authors', models.CharField(help_text='Незарегистрированные авторы публикации', max_length=1024, null=True)),
                ('year', models.PositiveIntegerField(help_text='Год выхода статьи')),
                ('additional', models.JSONField(help_text='Дополнительные параметры', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('index', models.ForeignKey(default=None, help_text='Описание типа рецензирования статьи', null=True, on_delete=django.db.models.deletion.SET_NULL, to='eleden.articleindex')),
                ('user', models.ForeignKey(help_text='Пользователь, добавивший публикацию', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(help_text='Зарегистрированные авторы публикации ', related_name='articles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-year', '-created_at'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления')),
                ('portfolio_file', models.OneToOneField(help_text='Файл портфолио', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='eleden.portfoliofile')),
                ('course', models.ForeignKey(help_text='Курс', on_delete=django.db.models.deletion.CASCADE, to='eleden.course')),
                ('period', models.ForeignKey(help_text='Период', on_delete=django.db.models.deletion.CASCADE, to='eleden.period')),
            ],
            options={
                'ordering': ('-created_at', 'portfolio_file'),
            },
            bases=(models.Model, devind_helpers.resolve_model.ResolveModel),
        ),
    ]
